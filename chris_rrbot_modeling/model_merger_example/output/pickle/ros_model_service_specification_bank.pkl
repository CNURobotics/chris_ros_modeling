ccopy_reg
_reconstructor
p0
(cchris_ros_modeling.specifications.type_specification
TypeSpecificationBank
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'names_to_metamodels'
p6
(dp7
S'gazebo_msgs/SetPhysicsProperties'
p8
g0
(cchris_ros_modeling.specifications.type_specification
TypeSpecification
p9
g2
Ntp10
Rp11
(dp12
S'construct_type'
p13
S'srv'
p14
sS'name'
p15
S'gazebo_msgs/SetPhysicsProperties'
p16
sS'package'
p17
S'gazebo_msgs'
p18
sS'spec'
p19
S'\n# sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly\nfloat64 time_step                  # dt in seconds\nfloat64 max_update_rate            # throttle maximum physics update rate\ngeometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])\ngazebo_msgs/ODEPhysics ode_config  # configurations for ODE\n---\nbool success                       # return true if set wrench successful\nstring status_message              # comments if available\n'
p20
sS'source'
p21
S'package_modeler'
p22
sS'version'
p23
I0
sS'file_path'
p24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetPhysicsProperties.srv'
p25
sbsS'gazebo_msgs/SetLinkState'
p26
g0
(g9
g2
Ntp27
Rp28
(dp29
g13
S'srv'
p30
sg15
S'gazebo_msgs/SetLinkState'
p31
sg17
S'gazebo_msgs'
p32
sg19
S'\ngazebo_msgs/LinkState link_state\n---\nbool success                # return true if set wrench successful\nstring status_message       # comments if available\n'
p33
sg21
S'package_modeler'
p34
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetLinkState.srv'
p35
sbsS'std_srvs/Trigger'
p36
g0
(g9
g2
Ntp37
Rp38
(dp39
g13
S'srv'
p40
sg15
S'std_srvs/Trigger'
p41
sg17
S'std_srvs'
p42
sg19
S'\n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n'
p43
sg21
S'package_modeler'
p44
sg23
I0
sg24
S'/opt/ros/melodic/share/std_srvs/srv/Trigger.srv'
p45
sbsS'roscpp_tutorials/TwoInts'
p46
g0
(g9
g2
Ntp47
Rp48
(dp49
g13
S'srv'
p50
sg15
S'roscpp_tutorials/TwoInts'
p51
sg17
S'roscpp_tutorials'
p52
sg19
S'\nint64 a\nint64 b\n---\nint64 sum\n'
p53
sg21
S'package_modeler'
p54
sg23
I0
sg24
S'/opt/ros/melodic/share/roscpp_tutorials/srv/TwoInts.srv'
p55
sbsS'diagnostic_msgs/SelfTest'
p56
g0
(g9
g2
Ntp57
Rp58
(dp59
g13
S'srv'
p60
sg15
S'diagnostic_msgs/SelfTest'
p61
sg17
S'diagnostic_msgs'
p62
sg19
S'\n---\nstring id\nbyte passed\nDiagnosticStatus[] status\n'
p63
sg21
S'package_modeler'
p64
sg23
I0
sg24
S'/opt/ros/melodic/share/diagnostic_msgs/srv/SelfTest.srv'
p65
sbsS'control_msgs/QueryCalibrationState'
p66
g0
(g9
g2
Ntp67
Rp68
(dp69
g13
S'srv'
p70
sg15
S'control_msgs/QueryCalibrationState'
p71
sg17
S'control_msgs'
p72
sg19
S'\n---\nbool is_calibrated'
p73
sg21
S'package_modeler'
p74
sg23
I0
sg24
S'/opt/ros/melodic/share/control_msgs/srv/QueryCalibrationState.srv'
p75
sbsS'robot_localization/FromLL'
p76
g0
(g9
g2
Ntp77
Rp78
(dp79
g13
S'srv'
p80
sg15
S'robot_localization/FromLL'
p81
sg17
S'robot_localization'
p82
sg19
S'\ngeographic_msgs/GeoPoint ll_point\n---\ngeometry_msgs/Point map_point\n'
p83
sg21
S'package_modeler'
p84
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/FromLL.srv'
p85
sbsS'moveit_msgs/LoadMap'
p86
g0
(g9
g2
Ntp87
Rp88
(dp89
g13
S'srv'
p90
sg15
S'moveit_msgs/LoadMap'
p91
sg17
S'moveit_msgs'
p92
sg19
S'\nstring filename\n---\nbool success'
p93
sg21
S'package_modeler'
p94
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/LoadMap.srv'
p95
sbsS'moveit_msgs/GetPositionIK'
p96
g0
(g9
g2
Ntp97
Rp98
(dp99
g13
S'srv'
p100
sg15
S'moveit_msgs/GetPositionIK'
p101
sg17
S'moveit_msgs'
p102
sg19
S'\n# A service call to carry out an inverse kinematics computation\n# The inverse kinematics request\nPositionIKRequest ik_request\n\n---\n\n# The returned solution \n# (in the same order as the list of joints specified in the IKRequest message)\nRobotState solution\n\nMoveItErrorCodes error_code\n'
p103
sg21
S'package_modeler'
p104
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetPositionIK.srv'
p105
sbsS'moveit_msgs/QueryPlannerInterfaces'
p106
g0
(g9
g2
Ntp107
Rp108
(dp109
g13
S'srv'
p110
sg15
S'moveit_msgs/QueryPlannerInterfaces'
p111
sg17
S'moveit_msgs'
p112
sg19
S'\n\n---\n\n# The planning instances that could be used in the benchmark\nPlannerInterfaceDescription[] planner_interfaces\n'
p113
sg21
S'package_modeler'
p114
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/QueryPlannerInterfaces.srv'
p115
sbsS'gazebo_msgs/SetJointTrajectory'
p116
g0
(g9
g2
Ntp117
Rp118
(dp119
g13
S'srv'
p120
sg15
S'gazebo_msgs/SetJointTrajectory'
p121
sg17
S'gazebo_msgs'
p122
sg19
S'\nstring model_name\ntrajectory_msgs/JointTrajectory joint_trajectory\ngeometry_msgs/Pose model_pose\nbool set_model_pose\nbool disable_physics_updates # defaults to false\n---\nbool success                # return true if set wrench successful\nstring status_message       # comments if available\n'
p123
sg21
S'package_modeler'
p124
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetJointTrajectory.srv'
p125
sbsS'control_toolbox/SetPidGains'
p126
g0
(g9
g2
Ntp127
Rp128
(dp129
g13
S'srv'
p130
sg15
S'control_toolbox/SetPidGains'
p131
sg17
S'control_toolbox'
p132
sg19
S'\nfloat64 p\nfloat64 i\nfloat64 d\nfloat64 i_clamp\nbool antiwindup\n---\n'
p133
sg21
S'package_modeler'
p134
sg23
I0
sg24
S'/opt/ros/melodic/share/control_toolbox/srv/SetPidGains.srv'
p135
sbsS'gazebo_msgs/JointRequest'
p136
g0
(g9
g2
Ntp137
Rp138
(dp139
g13
S'srv'
p140
sg15
S'gazebo_msgs/JointRequest'
p141
sg17
S'gazebo_msgs'
p142
sg19
S'\nstring joint_name   # name of the joint requested\n---\n\n'
p143
sg21
S'package_modeler'
p144
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/JointRequest.srv'
p145
sbsS'gazebo_msgs/GetModelState'
p146
g0
(g9
g2
Ntp147
Rp148
(dp149
g13
S'srv'
p150
sg15
S'gazebo_msgs/GetModelState'
p151
sg17
S'gazebo_msgs'
p152
sg19
S'\nstring model_name                    # name of Gazebo Model\nstring relative_entity_name          # return pose and twist relative to this entity\n                                     # an entity can be a model, body, or geom\n                                     # be sure to use gazebo scoped naming notation (e.g. [model_name::body_name])\n                                     # leave empty or "world" will use inertial world frame\n---\nHeader header                        # Standard metadata for higher-level stamped data types.\n                                     # * header.seq holds the number of requests since the plugin started\n                                     # * header.stamp timestamp related to the pose\n                                     # * header.frame_id not used but currently filled with the relative_entity_name\ngeometry_msgs/Pose pose              # pose of model in relative entity frame\ngeometry_msgs/Twist twist            # twist of model in relative entity frame\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p153
sg21
S'package_modeler'
p154
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetModelState.srv'
p155
sbsS'rosserial_msgs/RequestParam'
p156
g0
(g9
g2
Ntp157
Rp158
(dp159
g13
S'srv'
p160
sg15
S'rosserial_msgs/RequestParam'
p161
sg17
S'rosserial_msgs'
p162
sg19
S'\nstring name\n\n---\n\nint32[]   ints\nfloat32[] floats\nstring[]  strings\n'
p163
sg21
S'package_modeler'
p164
sg23
I0
sg24
S'/opt/ros/melodic/share/rosserial_msgs/srv/RequestParam.srv'
p165
sbsS'capabilities/GetRemappings'
p166
g0
(g9
g2
Ntp167
Rp168
(dp169
g13
S'srv'
p170
sg15
S'capabilities/GetRemappings'
p171
sg17
S'capabilities'
p172
sg19
S'\nstring spec\n---\nRemapping[] topics\nRemapping[] services\nRemapping[] actions\nRemapping[] parameters\n'
p173
sg21
S'package_modeler'
p174
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetRemappings.srv'
p175
sbsS'capabilities/GetRunningCapabilities'
p176
g0
(g9
g2
Ntp177
Rp178
(dp179
g13
S'srv'
p180
sg15
S'capabilities/GetRunningCapabilities'
p181
sg17
S'capabilities'
p182
sg19
S'\n\n---\nRunningCapability[] running_capabilities\n'
p183
sg21
S'package_modeler'
p184
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetRunningCapabilities.srv'
p185
sbsS'map_msgs/SaveMap'
p186
g0
(g9
g2
Ntp187
Rp188
(dp189
g13
S'srv'
p190
sg15
S'map_msgs/SaveMap'
p191
sg17
S'map_msgs'
p192
sg19
S'\n# Save the map to the filesystem\nstd_msgs/String filename \n'
p193
sg21
S'package_modeler'
p194
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/SaveMap.srv'
p195
sbsS'gazebo_msgs/BodyRequest'
p196
g0
(g9
g2
Ntp197
Rp198
(dp199
g13
S'srv'
p200
sg15
S'gazebo_msgs/BodyRequest'
p201
sg17
S'gazebo_msgs'
p202
sg19
S'\nstring body_name   # name of the body requested. body names are prefixed by model name, e.g. pr2::base_link\n---\n'
p203
sg21
S'package_modeler'
p204
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/BodyRequest.srv'
p205
sbsS'robot_localization/SetPose'
p206
g0
(g9
g2
Ntp207
Rp208
(dp209
g13
S'srv'
p210
sg15
S'robot_localization/SetPose'
p211
sg17
S'robot_localization'
p212
sg19
S'\ngeometry_msgs/PoseWithCovarianceStamped pose\n---\n'
p213
sg21
S'package_modeler'
p214
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/SetPose.srv'
p215
sbsS'moveit_msgs/GetPlanningScene'
p216
g0
(g9
g2
Ntp217
Rp218
(dp219
g13
S'srv'
p220
sg15
S'moveit_msgs/GetPlanningScene'
p221
sg17
S'moveit_msgs'
p222
sg19
S'\n# Get parts of the planning scene that are of interest\n# All scene components are returned if none are specified\nPlanningSceneComponents components\n---\nPlanningScene scene\n'
p223
sg21
S'package_modeler'
p224
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetPlanningScene.srv'
p225
sbsS'moveit_msgs/GetPositionFK'
p226
g0
(g9
g2
Ntp227
Rp228
(dp229
g13
S'srv'
p230
sg15
S'moveit_msgs/GetPositionFK'
p231
sg17
S'moveit_msgs'
p232
sg19
S'\n# A service definition for a standard forward kinematics service\n# The frame_id in the header message is the frame in which \n# the forward kinematics poses will be returned\nHeader header\n\n# A vector of link name for which forward kinematics must be computed\nstring[] fk_link_names\n\n# A robot state consisting of joint names and joint positions to be used for forward kinematics\nRobotState robot_state\n---\n# The resultant vector of PoseStamped messages that contains the (stamped) poses of the requested links\ngeometry_msgs/PoseStamped[] pose_stamped\n\n# The list of link names corresponding to the poses\nstring[] fk_link_names\n\nMoveItErrorCodes error_code\n'
p233
sg21
S'package_modeler'
p234
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetPositionFK.srv'
p235
sbsS'nodelet/NodeletLoad'
p236
g0
(g9
g2
Ntp237
Rp238
(dp239
g13
S'srv'
p240
sg15
S'nodelet/NodeletLoad'
p241
sg17
S'nodelet'
p242
sg19
S'\nstring name\nstring type\nstring[] remap_source_args\nstring[] remap_target_args\nstring[] my_argv\n\nstring bond_id\n---\nbool success\n'
p243
sg21
S'package_modeler'
p244
sg23
I0
sg24
S'/opt/ros/melodic/share/nodelet/srv/NodeletLoad.srv'
p245
sbsS'moveit_msgs/GetMotionSequence'
p246
g0
(g9
g2
Ntp247
Rp248
(dp249
g13
S'srv'
p250
sg15
S'moveit_msgs/GetMotionSequence'
p251
sg17
S'moveit_msgs'
p252
sg19
S'\n# Planning request with a list of motion commands\nMotionSequenceRequest request\n\n---\n# Response to the planning request\nMotionSequenceResponse response\n'
p253
sg21
S'package_modeler'
p254
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetMotionSequence.srv'
p255
sbsS'capabilities/GetInterfaces'
p256
g0
(g9
g2
Ntp257
Rp258
(dp259
g13
S'srv'
p260
sg15
S'capabilities/GetInterfaces'
p261
sg17
S'capabilities'
p262
sg19
S'\n\n---\nstring[] interfaces'
p263
sg21
S'package_modeler'
p264
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetInterfaces.srv'
p265
sbsS'nodelet/NodeletList'
p266
g0
(g9
g2
Ntp267
Rp268
(dp269
g13
S'srv'
p270
sg15
S'nodelet/NodeletList'
p271
sg17
S'nodelet'
p272
sg19
S'\n---\nstring[] nodelets\n'
p273
sg21
S'package_modeler'
p274
sg23
I0
sg24
S'/opt/ros/melodic/share/nodelet/srv/NodeletList.srv'
p275
sbsS'roscpp/GetLoggers'
p276
g0
(g9
g2
Ntp277
Rp278
(dp279
g13
S'srv'
p280
sg15
S'roscpp/GetLoggers'
p281
sg17
S'roscpp'
p282
sg19
S'\n---\nLogger[] loggers'
p283
sg21
S'package_modeler'
p284
sg23
I0
sg24
S'/opt/ros/melodic/share/roscpp/srv/GetLoggers.srv'
p285
sbsS'robot_localization/GetState'
p286
g0
(g9
g2
Ntp287
Rp288
(dp289
g13
S'srv'
p290
sg15
S'robot_localization/GetState'
p291
sg17
S'robot_localization'
p292
sg19
S'\ntime time_stamp\nstring frame_id\n---\n# State vector: x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az\nfloat64[15] state\n\n# Covariance matrix in row-major order\nfloat64[225] covariance\n'
p293
sg21
S'package_modeler'
p294
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/GetState.srv'
p295
sbsS'gazebo_msgs/SetModelState'
p296
g0
(g9
g2
Ntp297
Rp298
(dp299
g13
S'srv'
p300
sg15
S'gazebo_msgs/SetModelState'
p301
sg17
S'gazebo_msgs'
p302
sg19
S'\ngazebo_msgs/ModelState model_state\n---\nbool success                  # return true if setting state successful\nstring status_message         # comments if available\n'
p303
sg21
S'package_modeler'
p304
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetModelState.srv'
p305
sbsS'octomap_msgs/BoundingBoxQuery'
p306
g0
(g9
g2
Ntp307
Rp308
(dp309
g13
S'srv'
p310
sg15
S'octomap_msgs/BoundingBoxQuery'
p311
sg17
S'octomap_msgs'
p312
sg19
S'\n# Clear a region specified by a global axis-aligned bounding box in stored OctoMap\n\n# minimum corner point of axis-aligned bounding box in global frame\ngeometry_msgs/Point min\n# maximum corner point of axis-aligned bounding box in global frame\ngeometry_msgs/Point max\n---\n\n'
p313
sg21
S'package_modeler'
p314
sg23
I0
sg24
S'/opt/ros/melodic/share/octomap_msgs/srv/BoundingBoxQuery.srv'
p315
sbsS'robot_pose_ekf/GetStatus'
p316
g0
(g9
g2
Ntp317
Rp318
(dp319
g13
S'srv'
p320
sg15
S'robot_pose_ekf/GetStatus'
p321
sg17
S'robot_pose_ekf'
p322
sg19
S'\n\n---\nstring status'
p323
sg21
S'package_modeler'
p324
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_pose_ekf/srv/GetStatus.srv'
p325
sbsS'map_msgs/GetPointMap'
p326
g0
(g9
g2
Ntp327
Rp328
(dp329
g13
S'srv'
p330
sg15
S'map_msgs/GetPointMap'
p331
sg17
S'map_msgs'
p332
sg19
S'\n# Get the map as a sensor_msgs/PointCloud2 \n---\nsensor_msgs/PointCloud2 map\n'
p333
sg21
S'package_modeler'
p334
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/GetPointMap.srv'
p335
sbsS'capabilities/GetCapabilitySpecs'
p336
g0
(g9
g2
Ntp337
Rp338
(dp339
g13
S'srv'
p340
sg15
S'capabilities/GetCapabilitySpecs'
p341
sg17
S'capabilities'
p342
sg19
S'\n\n---\nCapabilitySpec[] capability_specs'
p343
sg21
S'package_modeler'
p344
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetCapabilitySpecs.srv'
p345
sbsS'topic_tools/MuxAdd'
p346
g0
(g9
g2
Ntp347
Rp348
(dp349
g13
S'srv'
p350
sg15
S'topic_tools/MuxAdd'
p351
sg17
S'topic_tools'
p352
sg19
S'\nstring topic\n---\n'
p353
sg21
S'package_modeler'
p354
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/MuxAdd.srv'
p355
sbsS'nav_msgs/GetMap'
p356
g0
(g9
g2
Ntp357
Rp358
(dp359
g13
S'srv'
p360
sg15
S'nav_msgs/GetMap'
p361
sg17
S'nav_msgs'
p362
sg19
S'\n# Get the map as a nav_msgs/OccupancyGrid\n---\nnav_msgs/OccupancyGrid map\n'
p363
sg21
S'package_modeler'
p364
sg23
I0
sg24
S'/opt/ros/melodic/share/nav_msgs/srv/GetMap.srv'
p365
sbsS'capabilities/EstablishBond'
p366
g0
(g9
g2
Ntp367
Rp368
(dp369
g13
S'srv'
p370
sg15
S'capabilities/EstablishBond'
p371
sg17
S'capabilities'
p372
sg19
S'\n\n---\nstring bond_id\n'
p373
sg21
S'package_modeler'
p374
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/EstablishBond.srv'
p375
sbsS'gazebo_msgs/GetLinkProperties'
p376
g0
(g9
g2
Ntp377
Rp378
(dp379
g13
S'srv'
p380
sg15
S'gazebo_msgs/GetLinkProperties'
p381
sg17
S'gazebo_msgs'
p382
sg19
S'\nstring link_name          # name of link\n                          # link names are prefixed by model name, e.g. pr2::base_link\n---\ngeometry_msgs/Pose com    # center of mass location in link frame\n                          # and orientation of the moment of inertias\n                          # relative to the link frame\nbool gravity_mode         # set gravity mode on/off\nfloat64 mass              # linear mass of link\nfloat64 ixx               # moment of inertia\nfloat64 ixy               # moment of inertia\nfloat64 ixz               # moment of inertia\nfloat64 iyy               # moment of inertia\nfloat64 iyz               # moment of inertia\nfloat64 izz               # moment of inertia\nbool success              # return true if get info is successful\nstring status_message     # comments if available\n'
p383
sg21
S'package_modeler'
p384
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetLinkProperties.srv'
p385
sbsS'moveit_msgs/RenameRobotStateInWarehouse'
p386
g0
(g9
g2
Ntp387
Rp388
(dp389
g13
S'srv'
p390
sg15
S'moveit_msgs/RenameRobotStateInWarehouse'
p391
sg17
S'moveit_msgs'
p392
sg19
S'\nstring old_name\nstring new_name\nstring robot\n---\n'
p393
sg21
S'package_modeler'
p394
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/RenameRobotStateInWarehouse.srv'
p395
sbsS'robot_localization/ToLL'
p396
g0
(g9
g2
Ntp397
Rp398
(dp399
g13
S'srv'
p400
sg15
S'robot_localization/ToLL'
p401
sg17
S'robot_localization'
p402
sg19
S'\ngeometry_msgs/Point map_point\n---\ngeographic_msgs/GeoPoint ll_point\n'
p403
sg21
S'package_modeler'
p404
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/ToLL.srv'
p405
sbsS'moveit_msgs/ChangeControlDimensions'
p406
g0
(g9
g2
Ntp407
Rp408
(dp409
g13
S'srv'
p410
sg15
S'moveit_msgs/ChangeControlDimensions'
p411
sg17
S'moveit_msgs'
p412
sg19
S"\n# For use with moveit_jog_arm Cartesian planner\n#\n# Turn on/off jogging along these dimensions.\n# Give 'true' to enable jogging in the direction, 'false' to disable\nbool control_x_translation\nbool control_y_translation\nbool control_z_translation\nbool control_x_rotation\nbool control_y_rotation\nbool control_z_rotation\n---\nbool success\n"
p413
sg21
S'package_modeler'
p414
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/ChangeControlDimensions.srv'
p415
sbsS'controller_manager_msgs/ReloadControllerLibraries'
p416
g0
(g9
g2
Ntp417
Rp418
(dp419
g13
S'srv'
p420
sg15
S'controller_manager_msgs/ReloadControllerLibraries'
p421
sg17
S'controller_manager_msgs'
p422
sg19
S'\n# The ReloadControllerLibraries service will reload all controllers that are available in\n# the system as plugins\n\n\n# Reloading libraries only works if there are no controllers loaded. If there\n# are still some controllers loaded, the reloading will fail.\n# If this bool is set to true, all loaded controllers will get\n# killed automatically, and the reloading can succeed.\nbool force_kill\n---\nbool ok\n'
p423
sg21
S'package_modeler'
p424
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/ReloadControllerLibraries.srv'
p425
sbsS'moveit_msgs/GetMotionPlan'
p426
g0
(g9
g2
Ntp427
Rp428
(dp429
g13
S'srv'
p430
sg15
S'moveit_msgs/GetMotionPlan'
p431
sg17
S'moveit_msgs'
p432
sg19
S'\n# This service contains the definition for a request to the motion\n# planner and the output it provides\n\nMotionPlanRequest motion_plan_request\n\n---\n\nMotionPlanResponse motion_plan_response\n'
p433
sg21
S'package_modeler'
p434
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetMotionPlan.srv'
p435
sbsS'moveit_msgs/SetPlannerParams'
p436
g0
(g9
g2
Ntp437
Rp438
(dp439
g13
S'srv'
p440
sg15
S'moveit_msgs/SetPlannerParams'
p441
sg17
S'moveit_msgs'
p442
sg19
S'\n# Name of planning config\nstring planner_config\n\n# Optional name of planning group (set global defaults if empty)\nstring group\n\n# parameters as key-value pairs\nPlannerParams params\n\n# replace params or augment existing ones?\nbool replace\n\n---\n\n'
p443
sg21
S'package_modeler'
p444
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/SetPlannerParams.srv'
p445
sbsS'tf/FrameGraph'
p446
g0
(g9
g2
Ntp447
Rp448
(dp449
g13
S'srv'
p450
sg15
S'tf/FrameGraph'
p451
sg17
S'tf'
p452
sg19
S'\n---\nstring dot_graph\n'
p453
sg21
S'package_modeler'
p454
sg23
I0
sg24
S'/opt/ros/melodic/share/tf/srv/FrameGraph.srv'
p455
sbsS'navfn/MakeNavPlan'
p456
g0
(g9
g2
Ntp457
Rp458
(dp459
g13
S'srv'
p460
sg15
S'navfn/MakeNavPlan'
p461
sg17
S'navfn'
p462
sg19
S'\ngeometry_msgs/PoseStamped start\ngeometry_msgs/PoseStamped goal\n---\n\nuint8 plan_found\nstring error_message\n\n# if plan_found is true, this is an array of waypoints from start to goal, where the first one equals start and the last one equals goal\ngeometry_msgs/PoseStamped[] path\n'
p463
sg21
S'package_modeler'
p464
sg23
I0
sg24
S'/opt/ros/melodic/share/navfn/srv/MakeNavPlan.srv'
p465
sbsS'moveit_msgs/ApplyPlanningScene'
p466
g0
(g9
g2
Ntp467
Rp468
(dp469
g13
S'srv'
p470
sg15
S'moveit_msgs/ApplyPlanningScene'
p471
sg17
S'moveit_msgs'
p472
sg19
S'\nPlanningScene scene\n---\nbool success\n'
p473
sg21
S'package_modeler'
p474
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/ApplyPlanningScene.srv'
p475
sbsS'std_srvs/SetBool'
p476
g0
(g9
g2
Ntp477
Rp478
(dp479
g13
S'srv'
p480
sg15
S'std_srvs/SetBool'
p481
sg17
S'std_srvs'
p482
sg19
S'\nbool data # e.g. for hardware enabling / disabling\n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n'
p483
sg21
S'package_modeler'
p484
sg23
I0
sg24
S'/opt/ros/melodic/share/std_srvs/srv/SetBool.srv'
p485
sbsS'controller_manager_msgs/UnloadController'
p486
g0
(g9
g2
Ntp487
Rp488
(dp489
g13
S'srv'
p490
sg15
S'controller_manager_msgs/UnloadController'
p491
sg17
S'controller_manager_msgs'
p492
sg19
S'\n# The UnloadController service allows you to unload a single controller \n# from controller_manager\n\n# To unload a controller, specify the "name" of the controller. \n# The return value "ok" indicates if the controller was successfully\n# unloaded or not\n\nstring name\n---\nbool ok'
p493
sg21
S'package_modeler'
p494
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/UnloadController.srv'
p495
sbsS'rviz/SendFilePath'
p496
g0
(g9
g2
Ntp497
Rp498
(dp499
g13
S'srv'
p500
sg15
S'rviz/SendFilePath'
p501
sg17
S'rviz'
p502
sg19
S'\nstd_msgs/String path # absolute path to file or directory\n---\nbool success\n'
p503
sg21
S'package_modeler'
p504
sg23
I0
sg24
S'/opt/ros/melodic/share/rviz/srv/SendFilePath.srv'
p505
sbsS'capabilities/GetCapabilitySpec'
p506
g0
(g9
g2
Ntp507
Rp508
(dp509
g13
S'srv'
p510
sg15
S'capabilities/GetCapabilitySpec'
p511
sg17
S'capabilities'
p512
sg19
S'\nstring capability_spec\n---\nCapabilitySpec capability_spec'
p513
sg21
S'package_modeler'
p514
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetCapabilitySpec.srv'
p515
sbsS'map_msgs/GetPointMapROI'
p516
g0
(g9
g2
Ntp517
Rp518
(dp519
g13
S'srv'
p520
sg15
S'map_msgs/GetPointMapROI'
p521
sg17
S'map_msgs'
p522
sg19
S'\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 r    # if != 0, circular ROI of radius r\nfloat64 l_x  # if r == 0, length of AABB on x\nfloat64 l_y  # if r == 0, length of AABB on y\nfloat64 l_z  # if r == 0, length of AABB on z\n---\nsensor_msgs/PointCloud2 sub_map'
p523
sg21
S'package_modeler'
p524
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/GetPointMapROI.srv'
p525
sbsS'gazebo_msgs/DeleteLight'
p526
g0
(g9
g2
Ntp527
Rp528
(dp529
g13
S'srv'
p530
sg15
S'gazebo_msgs/DeleteLight'
p531
sg17
S'gazebo_msgs'
p532
sg19
S'\nstring light_name                 # name of the light to be deleted\n---\nbool success                      # return true if deletion is successful\nstring status_message             # comments if available\n'
p533
sg21
S'package_modeler'
p534
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/DeleteLight.srv'
p535
sbsS'robot_localization/ToggleFilterProcessing'
p536
g0
(g9
g2
Ntp537
Rp538
(dp539
g13
S'srv'
p540
sg15
S'robot_localization/ToggleFilterProcessing'
p541
sg17
S'robot_localization'
p542
sg19
S'\nbool on\n---\nbool status\n'
p543
sg21
S'package_modeler'
p544
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/ToggleFilterProcessing.srv'
p545
sbsS'object_recognition_msgs/GetObjectInformation'
p546
g0
(g9
g2
Ntp547
Rp548
(dp549
g13
S'srv'
p550
sg15
S'object_recognition_msgs/GetObjectInformation'
p551
sg17
S'object_recognition_msgs'
p552
sg19
S'\n# Retrieve extra data from the DB for a given object\n\n# The type of the object to retrieve info from\nobject_recognition_msgs/ObjectType type\n\n---\n\n# Extra object info \nobject_recognition_msgs/ObjectInformation information\n'
p553
sg21
S'package_modeler'
p554
sg23
I0
sg24
S'/opt/ros/melodic/share/object_recognition_msgs/srv/GetObjectInformation.srv'
p555
sbsS'polled_camera/GetPolledImage'
p556
g0
(g9
g2
Ntp557
Rp558
(dp559
g13
S'srv'
p560
sg15
S'polled_camera/GetPolledImage'
p561
sg17
S'polled_camera'
p562
sg19
S'\n# Namespace to publish response topics in. A polled camera driver node\n# should publish:\n#   <response_namespace>/image_raw\n#   <response_namespace>/camera_info\nstring response_namespace\n\n# Timeout for attempting to capture data from the device. This does not\n# include latency from ROS communication, post-processing of raw camera\n# data, etc. A zero duration indicates no time limit.\nduration timeout\n\n# Binning settings, if supported by the camera.\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest, if supported by the camera.\nsensor_msgs/RegionOfInterest roi\n---\nbool success          # Could the image be captured?\nstring status_message # Error message in case of failure\ntime stamp            # Timestamp of the captured image. Can be matched\n                      # against incoming sensor_msgs/Image header.\n'
p563
sg21
S'package_modeler'
p564
sg23
I0
sg24
S'/opt/ros/melodic/share/polled_camera/srv/GetPolledImage.srv'
p565
sbsS'gazebo_msgs/SetLightProperties'
p566
g0
(g9
g2
Ntp567
Rp568
(dp569
g13
S'srv'
p570
sg15
S'gazebo_msgs/SetLightProperties'
p571
sg17
S'gazebo_msgs'
p572
sg19
S'\nstring light_name                    # name of Gazebo Light\nstd_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha\nfloat64 attenuation_constant\nfloat64 attenuation_linear\nfloat64 attenuation_quadratic\n---\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p573
sg21
S'package_modeler'
p574
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetLightProperties.srv'
p575
sbsS'dynamic_reconfigure/Reconfigure'
p576
g0
(g9
g2
Ntp577
Rp578
(dp579
g13
S'srv'
p580
sg15
S'dynamic_reconfigure/Reconfigure'
p581
sg17
S'dynamic_reconfigure'
p582
sg19
S'\nConfig config\n---\nConfig config\n'
p583
sg21
S'package_modeler'
p584
sg23
I0
sg24
S'/opt/ros/melodic/share/dynamic_reconfigure/srv/Reconfigure.srv'
p585
sbsS'rospy_tutorials/BadTwoInts'
p586
g0
(g9
g2
Ntp587
Rp588
(dp589
g13
S'srv'
p590
sg15
S'rospy_tutorials/BadTwoInts'
p591
sg17
S'rospy_tutorials'
p592
sg19
S'\n# Bad version of AddTwoInts for unit testing\nint64 a\nint32 b\n---\nint32 sum\n'
p593
sg21
S'package_modeler'
p594
sg23
I0
sg24
S'/opt/ros/melodic/share/rospy_tutorials/srv/BadTwoInts.srv'
p595
sbsS'gazebo_msgs/SetJointProperties'
p596
g0
(g9
g2
Ntp597
Rp598
(dp599
g13
S'srv'
p600
sg15
S'gazebo_msgs/SetJointProperties'
p601
sg17
S'gazebo_msgs'
p602
sg19
S'\nstring joint_name                               # name of joint\ngazebo_msgs/ODEJointProperties ode_joint_config # access to ODE joint dynamics properties\n---\nbool success                                    # return true if get successful\nstring status_message                           # comments if available\n'
p603
sg21
S'package_modeler'
p604
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetJointProperties.srv'
p605
sbsS'std_srvs/Empty'
p606
g0
(g9
g2
Ntp607
Rp608
(dp609
g13
S'srv'
p610
sg15
S'std_srvs/Empty'
p611
sg17
S'std_srvs'
p612
sg19
S'\n---'
p613
sg21
S'package_modeler'
p614
sg23
I0
sg24
S'/opt/ros/melodic/share/std_srvs/srv/Empty.srv'
p615
sbsS'gazebo_msgs/GetLightProperties'
p616
g0
(g9
g2
Ntp617
Rp618
(dp619
g13
S'srv'
p620
sg15
S'gazebo_msgs/GetLightProperties'
p621
sg17
S'gazebo_msgs'
p622
sg19
S'\nstring light_name                    # name of Gazebo Light\n---\nstd_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha\nfloat64 attenuation_constant\nfloat64 attenuation_linear\nfloat64 attenuation_quadratic\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p623
sg21
S'package_modeler'
p624
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetLightProperties.srv'
p625
sbsS'robot_localization/SetDatum'
p626
g0
(g9
g2
Ntp627
Rp628
(dp629
g13
S'srv'
p630
sg15
S'robot_localization/SetDatum'
p631
sg17
S'robot_localization'
p632
sg19
S'\ngeographic_msgs/GeoPose geo_pose\n---\n'
p633
sg21
S'package_modeler'
p634
sg23
I0
sg24
S'/opt/ros/melodic/share/robot_localization/srv/SetDatum.srv'
p635
sbsS'moveit_msgs/SaveMap'
p636
g0
(g9
g2
Ntp637
Rp638
(dp639
g13
S'srv'
p640
sg15
S'moveit_msgs/SaveMap'
p641
sg17
S'moveit_msgs'
p642
sg19
S'\nstring filename\n\n---\n\nbool success\n\n\n'
p643
sg21
S'package_modeler'
p644
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/SaveMap.srv'
p645
sbsS'capabilities/GetSemanticInterfaces'
p646
g0
(g9
g2
Ntp647
Rp648
(dp649
g13
S'srv'
p650
sg15
S'capabilities/GetSemanticInterfaces'
p651
sg17
S'capabilities'
p652
sg19
S'\nstring interface\n---\nstring[] semantic_interfaces'
p653
sg21
S'package_modeler'
p654
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetSemanticInterfaces.srv'
p655
sbsS'cartographer_ros_msgs/SubmapQuery'
p656
g0
(g9
g2
Ntp657
Rp658
(dp659
g13
S'srv'
p660
sg15
S'cartographer_ros_msgs/SubmapQuery'
p661
sg17
S'cartographer_ros_msgs'
p662
sg19
S'\n# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nint32 trajectory_id\nint32 submap_index\n---\ncartographer_ros_msgs/StatusResponse status\nint32 submap_version\ncartographer_ros_msgs/SubmapTexture[] textures\n'
p663
sg21
S'package_modeler'
p664
sg23
I0
sg24
S'/opt/ros/melodic/share/cartographer_ros_msgs/srv/SubmapQuery.srv'
p665
sbsS'gazebo_msgs/GetJointProperties'
p666
g0
(g9
g2
Ntp667
Rp668
(dp669
g13
S'srv'
p670
sg15
S'gazebo_msgs/GetJointProperties'
p671
sg17
S'gazebo_msgs'
p672
sg19
S'\nstring joint_name                    # name of joint\n---\n# joint type\nuint8 type\nuint8 REVOLUTE    = 0                # single DOF\nuint8 CONTINUOUS  = 1                # single DOF (revolute w/o joints)\nuint8 PRISMATIC   = 2                # single DOF\nuint8 FIXED       = 3                # 0 DOF\nuint8 BALL        = 4                # 3 DOF\nuint8 UNIVERSAL   = 5                # 2 DOF\n# dynamics properties\nfloat64[] damping\n# joint state\nfloat64[] position\nfloat64[] rate\n# service return status\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p673
sg21
S'package_modeler'
p674
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetJointProperties.srv'
p675
sbsS'moveit_msgs/GetRobotStateFromWarehouse'
p676
g0
(g9
g2
Ntp677
Rp678
(dp679
g13
S'srv'
p680
sg15
S'moveit_msgs/GetRobotStateFromWarehouse'
p681
sg17
S'moveit_msgs'
p682
sg19
S'\nstring name\nstring robot\n\n---\n\nmoveit_msgs/RobotState state\n'
p683
sg21
S'package_modeler'
p684
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetRobotStateFromWarehouse.srv'
p685
sbsS'controller_manager_msgs/SwitchController'
p686
g0
(g9
g2
Ntp687
Rp688
(dp689
g13
S'srv'
p690
sg15
S'controller_manager_msgs/SwitchController'
p691
sg17
S'controller_manager_msgs'
p692
sg19
S'\n# The SwitchController service allows you stop a number of controllers\n# and start a number of controllers, all in one single timestep of the\n# controller_manager control loop.\n\n# To switch controllers, specify\n#  * the list of controller names to start,\n#  * the list of controller names to stop, and\n#  * the strictness (BEST_EFFORT or STRICT)\n#    * STRICT means that switching will fail if anything goes wrong (an invalid\n#      controller name, a controller that failed to start, etc. )\n#    * BEST_EFFORT means that even when something goes wrong with on controller,\n#      the service will still try to start/stop the remaining controllers\n#  * start the controllers as soon as their hardware dependencies are ready, will\n#    wait for all interfaces to be ready otherwise\n#  * the timeout in seconds before aborting pending controllers. Zero for infinite\n\n# The return value "ok" indicates if the controllers were switched\n# successfully or not.  The meaning of success depends on the\n# specified strictness.\n\n\nstring[] start_controllers\nstring[] stop_controllers\nint32 strictness\nint32 BEST_EFFORT=1\nint32 STRICT=2\nbool start_asap\nfloat64 timeout\n---\nbool ok\n'
p693
sg21
S'package_modeler'
p694
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/SwitchController.srv'
p695
sbsS'geographic_msgs/GetGeoPath'
p696
g0
(g9
g2
Ntp697
Rp698
(dp699
g13
S'srv'
p700
sg15
S'geographic_msgs/GetGeoPath'
p701
sg17
S'geographic_msgs'
p702
sg19
S'\n# Searches for given start and goal the nearest route segments\n# and determine the path through the RouteNetwork\n\ngeographic_msgs/GeoPoint start        # starting point\ngeographic_msgs/GeoPoint goal         # goal point\n\n---\n\nbool success                          # true if the call succeeded\nstring status                         # more details\n\ngeographic_msgs/GeoPath plan          # path to follow\n\nuuid_msgs/UniqueID network            # the uuid of the RouteNetwork\nuuid_msgs/UniqueID start_seg          # the uuid of the starting RouteSegment\nuuid_msgs/UniqueID goal_seg           # the uuid of the ending RouteSegment\nfloat64 distance                      # the length of the plan\n'
p703
sg21
S'package_modeler'
p704
sg23
I0
sg24
S'/opt/ros/melodic/share/geographic_msgs/srv/GetGeoPath.srv'
p705
sbsS'gazebo_msgs/GetPhysicsProperties'
p706
g0
(g9
g2
Ntp707
Rp708
(dp709
g13
S'srv'
p710
sg15
S'gazebo_msgs/GetPhysicsProperties'
p711
sg17
S'gazebo_msgs'
p712
sg19
S'\n---\n# sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly\nfloat64 time_step                  # dt in seconds\nbool pause                         # true if physics engine is paused\nfloat64 max_update_rate            # throttle maximum physics update rate\ngeometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])\ngazebo_msgs/ODEPhysics ode_config  # contains physics configurations pertaining to ODE\nbool success                       # return true if set wrench successful\nstring status_message              # comments if available\n'
p713
sg21
S'package_modeler'
p714
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetPhysicsProperties.srv'
p715
sbsS'geographic_msgs/GetRoutePlan'
p716
g0
(g9
g2
Ntp717
Rp718
(dp719
g13
S'srv'
p720
sg15
S'geographic_msgs/GetRoutePlan'
p721
sg17
S'geographic_msgs'
p722
sg19
S'\n# Get a plan to traverse a route network from start to goal.\n#\n# Similar to nav_msgs/GetPlan, but constrained to use the route network.\n\nuuid_msgs/UniqueID network      # route network to use\nuuid_msgs/UniqueID start        # starting way point\nuuid_msgs/UniqueID goal         # goal way point\n\n---\n\nbool            success         # true if the call succeeded\nstring          status          # more details\n\nRoutePath       plan            # path to follow\n'
p723
sg21
S'package_modeler'
p724
sg23
I0
sg24
S'/opt/ros/melodic/share/geographic_msgs/srv/GetRoutePlan.srv'
p725
sbsS'rospy_tutorials/AddTwoInts'
p726
g0
(g9
g2
Ntp727
Rp728
(dp729
g13
S'srv'
p730
sg15
S'rospy_tutorials/AddTwoInts'
p731
sg17
S'rospy_tutorials'
p732
sg19
S'\nint64 a\nint64 b\n---\nint64 sum\n'
p733
sg21
S'package_modeler'
p734
sg23
I0
sg24
S'/opt/ros/melodic/share/rospy_tutorials/srv/AddTwoInts.srv'
p735
sbsS'topic_tools/MuxDelete'
p736
g0
(g9
g2
Ntp737
Rp738
(dp739
g13
S'srv'
p740
sg15
S'topic_tools/MuxDelete'
p741
sg17
S'topic_tools'
p742
sg19
S'\nstring topic\n---\n\n'
p743
sg21
S'package_modeler'
p744
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/MuxDelete.srv'
p745
sbsS'controller_manager_msgs/LoadController'
p746
g0
(g9
g2
Ntp747
Rp748
(dp749
g13
S'srv'
p750
sg15
S'controller_manager_msgs/LoadController'
p751
sg17
S'controller_manager_msgs'
p752
sg19
S'\n# The LoadController service allows you to load a single controller \n# inside controller_manager\n\n# To load a controller, specify the "name" of the controller. \n# The return value "ok" indicates if the controller was successfully\n# constructed and initialized or not.\n\nstring name\n---\nbool ok'
p753
sg21
S'package_modeler'
p754
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/LoadController.srv'
p755
sbsS'nav_msgs/SetMap'
p756
g0
(g9
g2
Ntp757
Rp758
(dp759
g13
S'srv'
p760
sg15
S'nav_msgs/SetMap'
p761
sg17
S'nav_msgs'
p762
sg19
S'\n# Set a new map together with an initial pose\nnav_msgs/OccupancyGrid map\ngeometry_msgs/PoseWithCovarianceStamped initial_pose\n---\nbool success\n\n'
p763
sg21
S'package_modeler'
p764
sg23
I0
sg24
S'/opt/ros/melodic/share/nav_msgs/srv/SetMap.srv'
p765
sbsS'moveit_msgs/GraspPlanning'
p766
g0
(g9
g2
Ntp767
Rp768
(dp769
g13
S'srv'
p770
sg15
S'moveit_msgs/GraspPlanning'
p771
sg17
S'moveit_msgs'
p772
sg19
S'\n# Requests that grasp planning be performed for the target object\n# returns a list of candidate grasps to be tested and executed\n\n# the planning group used\nstring group_name\n\n# the object to be grasped\nCollisionObject target\n\n# the names of the relevant support surfaces (e.g. tables) in the collision map\n# can be left empty if no names are available\nstring[] support_surfaces\n\n# an optional list of grasps to be evaluated by the planner\nGrasp[] candidate_grasps\n\n# an optional list of obstacles that we have semantic information about\n# and that can be moved in the course of grasping\nCollisionObject[] movable_obstacles\n\n---\n\n# the list of planned grasps\nGrasp[] grasps\n\n# whether an error occurred\nMoveItErrorCodes error_code\n'
p773
sg21
S'package_modeler'
p774
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GraspPlanning.srv'
p775
sbsS'gazebo_msgs/SpawnModel'
p776
g0
(g9
g2
Ntp777
Rp778
(dp779
g13
S'srv'
p780
sg15
S'gazebo_msgs/SpawnModel'
p781
sg17
S'gazebo_msgs'
p782
sg19
S'\nstring model_name                 # name of the model to be spawn\nstring model_xml                  # this should be an urdf or gazebo xml\nstring robot_namespace            # spawn robot and all ROS interfaces under this namespace\ngeometry_msgs/Pose initial_pose   # only applied to canonical body\nstring reference_frame            # initial_pose is defined relative to the frame of this model/body\n                                  # if left empty or "world", then gazebo world frame is used\n                                  # if non-existent model/body is specified, an error is returned\n                                  #   and the model is not spawned\n---\nbool success                      # return true if spawn successful\nstring status_message             # comments if available\n'
p783
sg21
S'package_modeler'
p784
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SpawnModel.srv'
p785
sbsS'capabilities/UseCapability'
p786
g0
(g9
g2
Ntp787
Rp788
(dp789
g13
S'srv'
p790
sg15
S'capabilities/UseCapability'
p791
sg17
S'capabilities'
p792
sg19
S'\nstring capability\nstring preferred_provider\nstring bond_id\n---\n'
p793
sg21
S'package_modeler'
p794
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/UseCapability.srv'
p795
sbsS'map_msgs/SetMapProjections'
p796
g0
(g9
g2
Ntp797
Rp798
(dp799
g13
S'srv'
p800
sg15
S'map_msgs/SetMapProjections'
p801
sg17
S'map_msgs'
p802
sg19
S'\n---\nmap_msgs/ProjectedMapInfo[] projected_maps_info\n'
p803
sg21
S'package_modeler'
p804
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/SetMapProjections.srv'
p805
sbsS'geographic_msgs/GetGeographicMap'
p806
g0
(g9
g2
Ntp807
Rp808
(dp809
g13
S'srv'
p810
sg15
S'geographic_msgs/GetGeographicMap'
p811
sg17
S'geographic_msgs'
p812
sg19
S'\n# This service requests a region of a geographic map.\n\nstring url            # where to read map data\n\n# Bounding box for the desired map.  If all zeros, provide all data\n# available from the specified URL.\nBoundingBox bounds\n\n---\n\nbool success          # true if the call succeeded\nstring status         # more details\n\n# The requested map, its bounds may differ from the requested bounds.\nGeographicMap map\n'
p813
sg21
S'package_modeler'
p814
sg23
I0
sg24
S'/opt/ros/melodic/share/geographic_msgs/srv/GetGeographicMap.srv'
p815
sbsS'moveit_msgs/ListRobotStatesInWarehouse'
p816
g0
(g9
g2
Ntp817
Rp818
(dp819
g13
S'srv'
p820
sg15
S'moveit_msgs/ListRobotStatesInWarehouse'
p821
sg17
S'moveit_msgs'
p822
sg19
S'\nstring regex\nstring robot\n\n---\n\nstring[] states\n'
p823
sg21
S'package_modeler'
p824
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/ListRobotStatesInWarehouse.srv'
p825
sbsS'nodelet/NodeletUnload'
p826
g0
(g9
g2
Ntp827
Rp828
(dp829
g13
S'srv'
p830
sg15
S'nodelet/NodeletUnload'
p831
sg17
S'nodelet'
p832
sg19
S'\nstring name\n---\nbool success\n'
p833
sg21
S'package_modeler'
p834
sg23
I0
sg24
S'/opt/ros/melodic/share/nodelet/srv/NodeletUnload.srv'
p835
sbsS'octomap_msgs/GetOctomap'
p836
g0
(g9
g2
Ntp837
Rp838
(dp839
g13
S'srv'
p840
sg15
S'octomap_msgs/GetOctomap'
p841
sg17
S'octomap_msgs'
p842
sg19
S'\n# Get the map as a octomap\n---\noctomap_msgs/Octomap map\n'
p843
sg21
S'package_modeler'
p844
sg23
I0
sg24
S'/opt/ros/melodic/share/octomap_msgs/srv/GetOctomap.srv'
p845
sbsS'turtlesim/SetPen'
p846
g0
(g9
g2
Ntp847
Rp848
(dp849
g13
S'srv'
p850
sg15
S'turtlesim/SetPen'
p851
sg17
S'turtlesim'
p852
sg19
S'\nuint8 r\nuint8 g\nuint8 b\nuint8 width\nuint8 off\n---\n'
p853
sg21
S'package_modeler'
p854
sg23
I0
sg24
S'/opt/ros/melodic/share/turtlesim/srv/SetPen.srv'
p855
sbsS'hector_gazebo_plugins/SetBias'
p856
g0
(g9
g2
Ntp857
Rp858
(dp859
g13
S'srv'
p860
sg15
S'hector_gazebo_plugins/SetBias'
p861
sg17
S'hector_gazebo_plugins'
p862
sg19
S'\ngeometry_msgs/Vector3 bias\n---\n'
p863
sg21
S'package_modeler'
p864
sg23
I0
sg24
S'/opt/ros/melodic/share/hector_gazebo_plugins/srv/SetBias.srv'
p865
sbsS'gazebo_msgs/ApplyJointEffort'
p866
g0
(g9
g2
Ntp867
Rp868
(dp869
g13
S'srv'
p870
sg15
S'gazebo_msgs/ApplyJointEffort'
p871
sg17
S'gazebo_msgs'
p872
sg19
S'\n# set urdf joint effort\nstring joint_name           # joint to apply wrench (linear force and torque)\nfloat64 effort              # effort to apply\ntime start_time             # optional wrench application start time (seconds)\n                            # if start_time < current time, start as soon as possible\nduration duration           # optional duration of wrench application time (seconds)\n                            # if duration < 0, apply wrench continuously without end\n                            # if duration = 0, do nothing\n                            # if duration < step size, assume step size and\n                            #               display warning in status_message\n---\nbool success                # return true if effort application is successful\nstring status_message       # comments if available\n'
p873
sg21
S'package_modeler'
p874
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/ApplyJointEffort.srv'
p875
sbsS'gazebo_msgs/DeleteModel'
p876
g0
(g9
g2
Ntp877
Rp878
(dp879
g13
S'srv'
p880
sg15
S'gazebo_msgs/DeleteModel'
p881
sg17
S'gazebo_msgs'
p882
sg19
S'\nstring model_name                 # name of the Gazebo Model to be deleted\n---\nbool success                      # return true if deletion is successful\nstring status_message             # comments if available\n'
p883
sg21
S'package_modeler'
p884
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/DeleteModel.srv'
p885
sbsS'cartographer_ros_msgs/StartTrajectory'
p886
g0
(g9
g2
Ntp887
Rp888
(dp889
g13
S'srv'
p890
sg15
S'cartographer_ros_msgs/StartTrajectory'
p891
sg17
S'cartographer_ros_msgs'
p892
sg19
S'\n# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncartographer_ros_msgs/TrajectoryOptions options\ncartographer_ros_msgs/SensorTopics topics\n---\ncartographer_ros_msgs/StatusResponse status\nint32 trajectory_id\n'
p893
sg21
S'package_modeler'
p894
sg23
I0
sg24
S'/opt/ros/melodic/share/cartographer_ros_msgs/srv/StartTrajectory.srv'
p895
sbsS'rosserial_msgs/RequestMessageInfo'
p896
g0
(g9
g2
Ntp897
Rp898
(dp899
g13
S'srv'
p900
sg15
S'rosserial_msgs/RequestMessageInfo'
p901
sg17
S'rosserial_msgs'
p902
sg19
S'\n# Full message datatype, eg "std_msgs/String"\nstring type\n---\n# If found, return md5 string of system\'s version of the message, and \n# textual definition. If not found, both strings are to be empty.\nstring md5\nstring definition\n'
p903
sg21
S'package_modeler'
p904
sg23
I0
sg24
S'/opt/ros/melodic/share/rosserial_msgs/srv/RequestMessageInfo.srv'
p905
sbsS'topic_tools/MuxSelect'
p906
g0
(g9
g2
Ntp907
Rp908
(dp909
g13
S'srv'
p910
sg15
S'topic_tools/MuxSelect'
p911
sg17
S'topic_tools'
p912
sg19
S'\nstring topic\n---\nstring prev_topic\n'
p913
sg21
S'package_modeler'
p914
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/MuxSelect.srv'
p915
sbsS'gazebo_msgs/SetModelConfiguration'
p916
g0
(g9
g2
Ntp917
Rp918
(dp919
g13
S'srv'
p920
sg15
S'gazebo_msgs/SetModelConfiguration'
p921
sg17
S'gazebo_msgs'
p922
sg19
S'\n# Set joint positions for a model\nstring model_name           # model to set state\nstring urdf_param_name      # UNUSED\n\nstring[] joint_names        # list of joints to set positions.  if joint is not listed here, preserve current position.\nfloat64[] joint_positions   # set to this position.\n---\nbool success                # return true if setting state successful\nstring status_message       # comments if available\n'
p923
sg21
S'package_modeler'
p924
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetModelConfiguration.srv'
p925
sbsS'control_msgs/QueryTrajectoryState'
p926
g0
(g9
g2
Ntp927
Rp928
(dp929
g13
S'srv'
p930
sg15
S'control_msgs/QueryTrajectoryState'
p931
sg17
S'control_msgs'
p932
sg19
S'\ntime time\n---\nstring[] name\nfloat64[] position\nfloat64[] velocity\nfloat64[] acceleration\n'
p933
sg21
S'package_modeler'
p934
sg23
I0
sg24
S'/opt/ros/melodic/share/control_msgs/srv/QueryTrajectoryState.srv'
p935
sbsS'cartographer_ros_msgs/WriteState'
p936
g0
(g9
g2
Ntp937
Rp938
(dp939
g13
S'srv'
p940
sg15
S'cartographer_ros_msgs/WriteState'
p941
sg17
S'cartographer_ros_msgs'
p942
sg19
S'\n# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nstring filename\n---\ncartographer_ros_msgs/StatusResponse status\n'
p943
sg21
S'package_modeler'
p944
sg23
I0
sg24
S'/opt/ros/melodic/share/cartographer_ros_msgs/srv/WriteState.srv'
p945
sbsS'map_msgs/GetMapROI'
p946
g0
(g9
g2
Ntp947
Rp948
(dp949
g13
S'srv'
p950
sg15
S'map_msgs/GetMapROI'
p951
sg17
S'map_msgs'
p952
sg19
S'\nfloat64 x\nfloat64 y\nfloat64 l_x\nfloat64 l_y\n---\nnav_msgs/OccupancyGrid sub_map'
p953
sg21
S'package_modeler'
p954
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/GetMapROI.srv'
p955
sbsS'navfn/SetCostmap'
p956
g0
(g9
g2
Ntp957
Rp958
(dp959
g13
S'srv'
p960
sg15
S'navfn/SetCostmap'
p961
sg17
S'navfn'
p962
sg19
S'\nuint8[] costs\nuint16 height\nuint16 width\n---'
p963
sg21
S'package_modeler'
p964
sg23
I0
sg24
S'/opt/ros/melodic/share/navfn/srv/SetCostmap.srv'
p965
sbsS'cartographer_ros_msgs/FinishTrajectory'
p966
g0
(g9
g2
Ntp967
Rp968
(dp969
g13
S'srv'
p970
sg15
S'cartographer_ros_msgs/FinishTrajectory'
p971
sg17
S'cartographer_ros_msgs'
p972
sg19
S'\n# Copyright 2016 The Cartographer Authors\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nint32 trajectory_id\n---\ncartographer_ros_msgs/StatusResponse status\n'
p973
sg21
S'package_modeler'
p974
sg23
I0
sg24
S'/opt/ros/melodic/share/cartographer_ros_msgs/srv/FinishTrajectory.srv'
p975
sbsS'capabilities/StartCapability'
p976
g0
(g9
g2
Ntp977
Rp978
(dp979
g13
S'srv'
p980
sg15
S'capabilities/StartCapability'
p981
sg17
S'capabilities'
p982
sg19
S'\nstring capability\nstring preferred_provider\n---\nbool successful'
p983
sg21
S'package_modeler'
p984
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/StartCapability.srv'
p985
sbsS'diagnostic_msgs/AddDiagnostics'
p986
g0
(g9
g2
Ntp987
Rp988
(dp989
g13
S'srv'
p990
sg15
S'diagnostic_msgs/AddDiagnostics'
p991
sg17
S'diagnostic_msgs'
p992
sg19
S'\n# This service is used as part of the process for loading analyzers at runtime,\n# and should be used by a loader script or program, not as a standalone service.\n# Information about dynamic addition of analyzers can be found at\n# http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime\n\n# The load_namespace parameter defines the namespace where parameters for the\n# initialization of analyzers in the diagnostic aggregator have been loaded. The\n# value should be a global name (i.e. /my/name/space), not a relative\n# (my/name/space) or private (~my/name/space) name. Analyzers will not be added\n# if a non-global name is used. The call will also fail if the namespace\n# contains parameters that follow a namespace structure that does not conform to\n# that expected by the analyzer definitions. See\n# http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators\n# and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer\n# for examples of the structure of yaml files which are expected to have been\n# loaded into the namespace.\nstring load_namespace\n---\n\n# True if diagnostic aggregator was updated with new diagnostics, False\n# otherwise. A false return value means that either there is a bond in the\n# aggregator which already used the requested namespace, or the initialization\n# of analyzers failed.\nbool success\n\n# Message with additional information about the success or failure\nstring message\n'
p993
sg21
S'package_modeler'
p994
sg23
I0
sg24
S'/opt/ros/melodic/share/diagnostic_msgs/srv/AddDiagnostics.srv'
p995
sbsS'topic_tools/DemuxSelect'
p996
g0
(g9
g2
Ntp997
Rp998
(dp999
g13
S'srv'
p1000
sg15
S'topic_tools/DemuxSelect'
p1001
sg17
S'topic_tools'
p1002
sg19
S'\nstring topic\n---\nstring prev_topic\n'
p1003
sg21
S'package_modeler'
p1004
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/DemuxSelect.srv'
p1005
sbsS'rosserial_msgs/RequestServiceInfo'
p1006
g0
(g9
g2
Ntp1007
Rp1008
(dp1009
g13
S'srv'
p1010
sg15
S'rosserial_msgs/RequestServiceInfo'
p1011
sg17
S'rosserial_msgs'
p1012
sg19
S'\n# service name\nstring service\n---\nstring service_md5\nstring request_md5\nstring response_md5\n'
p1013
sg21
S'package_modeler'
p1014
sg23
I0
sg24
S'/opt/ros/melodic/share/rosserial_msgs/srv/RequestServiceInfo.srv'
p1015
sbsS'turtlesim/TeleportAbsolute'
p1016
g0
(g9
g2
Ntp1017
Rp1018
(dp1019
g13
S'srv'
p1020
sg15
S'turtlesim/TeleportAbsolute'
p1021
sg17
S'turtlesim'
p1022
sg19
S'\nfloat32 x\nfloat32 y\nfloat32 theta\n---\n'
p1023
sg21
S'package_modeler'
p1024
sg23
I0
sg24
S'/opt/ros/melodic/share/turtlesim/srv/TeleportAbsolute.srv'
p1025
sbsS'geographic_msgs/UpdateGeographicMap'
p1026
g0
(g9
g2
Ntp1027
Rp1028
(dp1029
g13
S'srv'
p1030
sg15
S'geographic_msgs/UpdateGeographicMap'
p1031
sg17
S'geographic_msgs'
p1032
sg19
S'\n# This service updates a geographic map.\n\n# Changes to geographic map.\nGeographicMapChanges updates\n\n---\n\nbool   success        # true if the call succeeded\nstring status         # more details\n'
p1033
sg21
S'package_modeler'
p1034
sg23
I0
sg24
S'/opt/ros/melodic/share/geographic_msgs/srv/UpdateGeographicMap.srv'
p1035
sbsS'map_msgs/ProjectedMapsInfo'
p1036
g0
(g9
g2
Ntp1037
Rp1038
(dp1039
g13
S'srv'
p1040
sg15
S'map_msgs/ProjectedMapsInfo'
p1041
sg17
S'map_msgs'
p1042
sg19
S'\nmap_msgs/ProjectedMapInfo[] projected_maps_info\n'
p1043
sg21
S'package_modeler'
p1044
sg23
I0
sg24
S'/opt/ros/melodic/share/map_msgs/srv/ProjectedMapsInfo.srv'
p1045
sbsS'moveit_msgs/SaveRobotStateToWarehouse'
p1046
g0
(g9
g2
Ntp1047
Rp1048
(dp1049
g13
S'srv'
p1050
sg15
S'moveit_msgs/SaveRobotStateToWarehouse'
p1051
sg17
S'moveit_msgs'
p1052
sg19
S'\nstring name\nstring robot\nmoveit_msgs/RobotState state\n\n---\n\nbool success\n'
p1053
sg21
S'package_modeler'
p1054
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/SaveRobotStateToWarehouse.srv'
p1055
sbsS'laser_assembler/AssembleScans'
p1056
g0
(g9
g2
Ntp1057
Rp1058
(dp1059
g13
S'srv'
p1060
sg15
S'laser_assembler/AssembleScans'
p1061
sg17
S'laser_assembler'
p1062
sg19
S'\n# The time interval on which we want to aggregate scans\ntime begin\n# The end of the interval on which we want to assemble scans or clouds\ntime end\n---\n# The point cloud holding the assembled clouds or scans. \n# This cloud is in the frame specified by the ~fixed_frame node parameter. \n# cloud is empty if no scans are received in the requested interval.\nsensor_msgs/PointCloud cloud\n'
p1063
sg21
S'package_modeler'
p1064
sg23
I0
sg24
S'/opt/ros/melodic/share/laser_assembler/srv/AssembleScans.srv'
p1065
sbsS'topic_tools/DemuxList'
p1066
g0
(g9
g2
Ntp1067
Rp1068
(dp1069
g13
S'srv'
p1070
sg15
S'topic_tools/DemuxList'
p1071
sg17
S'topic_tools'
p1072
sg19
S'\n---\nstring[] topics\n'
p1073
sg21
S'package_modeler'
p1074
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/DemuxList.srv'
p1075
sbsS'nav_msgs/GetPlan'
p1076
g0
(g9
g2
Ntp1077
Rp1078
(dp1079
g13
S'srv'
p1080
sg15
S'nav_msgs/GetPlan'
p1081
sg17
S'nav_msgs'
p1082
sg19
S'\n# Get a plan from the current position to the goal Pose \n\n# The start pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final pose of the goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal is obstructed, how many meters the planner can \n# relax the constraint in x and y before failing. \nfloat32 tolerance\n---\nnav_msgs/Path plan\n'
p1083
sg21
S'package_modeler'
p1084
sg23
I0
sg24
S'/opt/ros/melodic/share/nav_msgs/srv/GetPlan.srv'
p1085
sbsS'capabilities/FreeCapability'
p1086
g0
(g9
g2
Ntp1087
Rp1088
(dp1089
g13
S'srv'
p1090
sg15
S'capabilities/FreeCapability'
p1091
sg17
S'capabilities'
p1092
sg19
S'\nstring capability\nstring bond_id\n---\n'
p1093
sg21
S'package_modeler'
p1094
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/FreeCapability.srv'
p1095
sbsS'moveit_msgs/ChangeDriftDimensions'
p1096
g0
(g9
g2
Ntp1097
Rp1098
(dp1099
g13
S'srv'
p1100
sg15
S'moveit_msgs/ChangeDriftDimensions'
p1101
sg17
S'moveit_msgs'
p1102
sg19
S"\n# For use with moveit_jog_arm Cartesian planner\n#\n# Allow the robot to drift along these dimensions in a smooth but unregulated way.\n# Give 'true' to enable drift in the direction, 'false' to disable.\n# For example, may allow wrist rotation by drift_x_rotation == true.\nbool drift_x_translation\nbool drift_y_translation\nbool drift_z_translation\nbool drift_x_rotation\nbool drift_y_rotation\nbool drift_z_rotation\n\n# Not implemented as of Jan 2020 (for now assumed to be the identity matrix). In the future it will allow us to transform\n# from the jog control frame to a unique drift frame, so the robot can drift along off-principal axes\ngeometry_msgs/Transform transform_jog_frame_to_drift_frame\n---\nbool success\n"
p1103
sg21
S'package_modeler'
p1104
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/ChangeDriftDimensions.srv'
p1105
sbsS'roscpp/Empty'
p1106
g0
(g9
g2
Ntp1107
Rp1108
(dp1109
g13
S'srv'
p1110
sg15
S'roscpp/Empty'
p1111
sg17
S'roscpp'
p1112
sg19
S'\n---'
p1113
sg21
S'package_modeler'
p1114
sg23
I0
sg24
S'/opt/ros/melodic/share/roscpp/srv/Empty.srv'
p1115
sbsS'turtlesim/TeleportRelative'
p1116
g0
(g9
g2
Ntp1117
Rp1118
(dp1119
g13
S'srv'
p1120
sg15
S'turtlesim/TeleportRelative'
p1121
sg17
S'turtlesim'
p1122
sg19
S'\nfloat32 linear\nfloat32 angular\n---\n'
p1123
sg21
S'package_modeler'
p1124
sg23
I0
sg24
S'/opt/ros/melodic/share/turtlesim/srv/TeleportRelative.srv'
p1125
sbsS'controller_manager_msgs/ListControllerTypes'
p1126
g0
(g9
g2
Ntp1127
Rp1128
(dp1129
g13
S'srv'
p1130
sg15
S'controller_manager_msgs/ListControllerTypes'
p1131
sg17
S'controller_manager_msgs'
p1132
sg19
S'\n# The ListControllers service returns a list of controller types that are known\n# to the controller manager plugin mechanism.\n\n---\nstring[] types\nstring[] base_classes\n'
p1133
sg21
S'package_modeler'
p1134
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/ListControllerTypes.srv'
p1135
sbsS'controller_manager_msgs/ListControllers'
p1136
g0
(g9
g2
Ntp1137
Rp1138
(dp1139
g13
S'srv'
p1140
sg15
S'controller_manager_msgs/ListControllers'
p1141
sg17
S'controller_manager_msgs'
p1142
sg19
S'\n# The ListControllers service returns a list of controller names/states/types of the\n# controllers that are loaded inside the controller_manager.\n\n---\nControllerState[] controller\n'
p1143
sg21
S'package_modeler'
p1144
sg23
I0
sg24
S'/opt/ros/melodic/share/controller_manager_msgs/srv/ListControllers.srv'
p1145
sbsS'moveit_msgs/ExecuteKnownTrajectory'
p1146
g0
(g9
g2
Ntp1147
Rp1148
(dp1149
g13
S'srv'
p1150
sg15
S'moveit_msgs/ExecuteKnownTrajectory'
p1151
sg17
S'moveit_msgs'
p1152
sg19
S'\n# This service is deprecated and will go away at some point. For new development use the ExecuteTrajectory action.\n# Effective since: Indigo 0.7.4, Jade and Kinetic 0.8.3\n\n# The trajectory to execute \nRobotTrajectory trajectory\n\n# Set this to true if the service should block until the execution is complete\nbool wait_for_execution\n\n---\n\n# Error code - encodes the overall reason for failure\nMoveItErrorCodes error_code\n'
p1153
sg21
S'package_modeler'
p1154
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/ExecuteKnownTrajectory.srv'
p1155
sbsS'roscpp/SetLoggerLevel'
p1156
g0
(g9
g2
Ntp1157
Rp1158
(dp1159
g13
S'srv'
p1160
sg15
S'roscpp/SetLoggerLevel'
p1161
sg17
S'roscpp'
p1162
sg19
S'\nstring logger\nstring level\n---'
p1163
sg21
S'package_modeler'
p1164
sg23
I0
sg24
S'/opt/ros/melodic/share/roscpp/srv/SetLoggerLevel.srv'
p1165
sbsS'moveit_msgs/GetPlannerParams'
p1166
g0
(g9
g2
Ntp1167
Rp1168
(dp1169
g13
S'srv'
p1170
sg15
S'moveit_msgs/GetPlannerParams'
p1171
sg17
S'moveit_msgs'
p1172
sg19
S'\n# Name of planning config\nstring planner_config\n\n# Optional name of planning group (return global defaults if empty)\nstring group\n\n---\n\n# parameters as key-value pairs\nPlannerParams params\n'
p1173
sg21
S'package_modeler'
p1174
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetPlannerParams.srv'
p1175
sbsS'gazebo_msgs/GetModelProperties'
p1176
g0
(g9
g2
Ntp1177
Rp1178
(dp1179
g13
S'srv'
p1180
sg15
S'gazebo_msgs/GetModelProperties'
p1181
sg17
S'gazebo_msgs'
p1182
sg19
S'\nstring model_name                    # name of Gazebo Model\n---\nstring parent_model_name             # parent model\nstring canonical_body_name           # name of canonical body, body names are prefixed by model name, e.g. pr2::base_link\nstring[] body_names                  # list of bodies, body names are prefixed by model name, e.g. pr2::base_link\nstring[] geom_names                  # list of geoms\nstring[] joint_names                 # list of joints attached to the model\nstring[] child_model_names           # list of child models\nbool is_static                       # returns true if model is static\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p1183
sg21
S'package_modeler'
p1184
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetModelProperties.srv'
p1185
sbsS'gazebo_msgs/ApplyBodyWrench'
p1186
g0
(g9
g2
Ntp1187
Rp1188
(dp1189
g13
S'srv'
p1190
sg15
S'gazebo_msgs/ApplyBodyWrench'
p1191
sg17
S'gazebo_msgs'
p1192
sg19
S'\n# Apply Wrench to Gazebo Body.\n# via the callback mechanism\n# all Gazebo operations are made in world frame\nstring body_name                          # Gazebo body to apply wrench (linear force and torque)\n                                          # wrench is applied in the gazebo world by default\n                                          # body names are prefixed by model name, e.g. pr2::base_link\nstring reference_frame                    # wrench is defined in the reference frame of this entity\n                                          # use inertial frame if left empty\n                                          # frame names are bodies prefixed by model name, e.g. pr2::base_link\ngeometry_msgs/Point  reference_point      # wrench is defined at this location in the reference frame\ngeometry_msgs/Wrench wrench               # wrench applied to the origin of the body\ntime start_time                           # (optional) wrench application start time (seconds)\n                                          # if start_time is not specified, or\n                                          # start_time < current time, start as soon as possible\nduration duration                         # optional duration of wrench application time (seconds)\n                                          # if duration < 0, apply wrench continuously without end\n                                          # if duration = 0, do nothing\n                                          # if duration < step size, apply wrench\n                                          # for one step size\n---\nbool success                              # return true if set wrench successful\nstring status_message                     # comments if available\n'
p1193
sg21
S'package_modeler'
p1194
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/ApplyBodyWrench.srv'
p1195
sbsS'sensor_msgs/SetCameraInfo'
p1196
g0
(g9
g2
Ntp1197
Rp1198
(dp1199
g13
S'srv'
p1200
sg15
S'sensor_msgs/SetCameraInfo'
p1201
sg17
S'sensor_msgs'
p1202
sg19
S"\n# This service requests that a camera stores the given CameraInfo \n# as that camera's calibration information.\n#\n# The width and height in the camera_info field should match what the\n# camera is currently outputting on its camera_info topic, and the camera\n# will assume that the region of the imager that is being referred to is\n# the region that the camera is currently capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info to store\n---\nbool success          # True if the call succeeded\nstring status_message # Used to give details about success\n"
p1203
sg21
S'package_modeler'
p1204
sg23
I0
sg24
S'/opt/ros/melodic/share/sensor_msgs/srv/SetCameraInfo.srv'
p1205
sbsS'capabilities/StopCapability'
p1206
g0
(g9
g2
Ntp1207
Rp1208
(dp1209
g13
S'srv'
p1210
sg15
S'capabilities/StopCapability'
p1211
sg17
S'capabilities'
p1212
sg19
S'\nstring capability\n---\nbool successful'
p1213
sg21
S'package_modeler'
p1214
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/StopCapability.srv'
p1215
sbsS'topic_tools/DemuxAdd'
p1216
g0
(g9
g2
Ntp1217
Rp1218
(dp1219
g13
S'srv'
p1220
sg15
S'topic_tools/DemuxAdd'
p1221
sg17
S'topic_tools'
p1222
sg19
S'\nstring topic\n---\n'
p1223
sg21
S'package_modeler'
p1224
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/DemuxAdd.srv'
p1225
sbsS'capabilities/GetNodeletManagerName'
p1226
g0
(g9
g2
Ntp1227
Rp1228
(dp1229
g13
S'srv'
p1230
sg15
S'capabilities/GetNodeletManagerName'
p1231
sg17
S'capabilities'
p1232
sg19
S'\n\n---\nstring nodelet_manager_name\n'
p1233
sg21
S'package_modeler'
p1234
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetNodeletManagerName.srv'
p1235
sbsS'moveit_msgs/GetCartesianPath'
p1236
g0
(g9
g2
Ntp1237
Rp1238
(dp1239
g13
S'srv'
p1240
sg15
S'moveit_msgs/GetCartesianPath'
p1241
sg17
S'moveit_msgs'
p1242
sg19
S'\n# Define the frame for the specified waypoints\nHeader header\n\n# The start at which to start the Cartesian path\nRobotState start_state\n\n# Mandatory name of group to compute the path for\nstring group_name\n\n# Optional name of IK link for which waypoints are specified.\n# If not specified, the tip of the group (which is assumed to be a chain)\n# is assumed to be the link\nstring link_name\n\n# A sequence of waypoints to be followed by the specified link, \n# while moving the specified group, such that the group moves only\n# in a straight line between waypoints\ngeometry_msgs/Pose[] waypoints\n\n# The maximum distance (in Cartesian space) between consecutive points\n# in the returned path. This must always be specified and > 0\nfloat64 max_step\n\n# If above 0, this value is assumed to be the maximum allowed distance \n# (L infinity) in configuration space, between consecutive points.\n# If this distance is found to be above the maximum threshold, the path \n# computation fails.\nfloat64 jump_threshold\n\n# Set to true if collisions should be avoided when possible\nbool avoid_collisions\n\n# Specify additional constraints to be met by the Cartesian path\nConstraints path_constraints\n\n---\n\n# The state at which the computed path starts\nRobotState start_state\n\n# The computed solution trajectory, for the desired group, in configuration space\nRobotTrajectory solution\n\n# If the computation was incomplete, this value indicates the fraction of the path\n# that was in fact computed (nr of waypoints traveled through)\nfloat64 fraction\n\n# The error code of the computation\nMoveItErrorCodes error_code\n'
p1243
sg21
S'package_modeler'
p1244
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetCartesianPath.srv'
p1245
sbsS'topic_tools/MuxList'
p1246
g0
(g9
g2
Ntp1247
Rp1248
(dp1249
g13
S'srv'
p1250
sg15
S'topic_tools/MuxList'
p1251
sg17
S'topic_tools'
p1252
sg19
S'\n---\nstring[] topics\n'
p1253
sg21
S'package_modeler'
p1254
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/MuxList.srv'
p1255
sbsS'topic_tools/DemuxDelete'
p1256
g0
(g9
g2
Ntp1257
Rp1258
(dp1259
g13
S'srv'
p1260
sg15
S'topic_tools/DemuxDelete'
p1261
sg17
S'topic_tools'
p1262
sg19
S'\nstring topic\n---\n\n'
p1263
sg21
S'package_modeler'
p1264
sg23
I0
sg24
S'/opt/ros/melodic/share/topic_tools/srv/DemuxDelete.srv'
p1265
sbsS'moveit_msgs/DeleteRobotStateFromWarehouse'
p1266
g0
(g9
g2
Ntp1267
Rp1268
(dp1269
g13
S'srv'
p1270
sg15
S'moveit_msgs/DeleteRobotStateFromWarehouse'
p1271
sg17
S'moveit_msgs'
p1272
sg19
S'\nstring name\nstring robot\n\n---\n'
p1273
sg21
S'package_modeler'
p1274
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/DeleteRobotStateFromWarehouse.srv'
p1275
sbsS'laser_assembler/AssembleScans2'
p1276
g0
(g9
g2
Ntp1277
Rp1278
(dp1279
g13
S'srv'
p1280
sg15
S'laser_assembler/AssembleScans2'
p1281
sg17
S'laser_assembler'
p1282
sg19
S'\n# The time interval on which we want to aggregate scans\ntime begin\n# The end of the interval on which we want to assemble scans or clouds\ntime end\n---\n# The point cloud holding the assembled clouds or scans. \n# This cloud is in the frame specified by the ~fixed_frame node parameter. \n# cloud is empty if no scans are received in the requested interval.\nsensor_msgs/PointCloud2 cloud\n'
p1283
sg21
S'package_modeler'
p1284
sg23
I0
sg24
S'/opt/ros/melodic/share/laser_assembler/srv/AssembleScans2.srv'
p1285
sbsS'gazebo_msgs/SetLinkProperties'
p1286
g0
(g9
g2
Ntp1287
Rp1288
(dp1289
g13
S'srv'
p1290
sg15
S'gazebo_msgs/SetLinkProperties'
p1291
sg17
S'gazebo_msgs'
p1292
sg19
S'\nstring link_name          # name of link\n                          # link names are prefixed by model name, e.g. pr2::base_link\ngeometry_msgs/Pose com    # center of mass location in link frame\n                          # and orientation of the moment of inertias\n                          # relative to the link frame\nbool gravity_mode         # set gravity mode on/off\nfloat64 mass              # linear mass of link\nfloat64 ixx               # moment of inertia\nfloat64 ixy               # moment of inertia\nfloat64 ixz               # moment of inertia\nfloat64 iyy               # moment of inertia\nfloat64 iyz               # moment of inertia\nfloat64 izz               # moment of inertia\n---\nbool success              # return true if get info is successful\nstring status_message     # comments if available\n'
p1293
sg21
S'package_modeler'
p1294
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/SetLinkProperties.srv'
p1295
sbsS'gazebo_msgs/GetLinkState'
p1296
g0
(g9
g2
Ntp1297
Rp1298
(dp1299
g13
S'srv'
p1300
sg15
S'gazebo_msgs/GetLinkState'
p1301
sg17
S'gazebo_msgs'
p1302
sg19
S'\nstring link_name          # name of link\n                          # link names are prefixed by model name, e.g. pr2::base_link\nstring reference_frame    # reference frame of returned information, must be a valid link\n                          # if empty, use inertial (gazebo world) frame\n                          # reference_frame names are prefixed by model name, e.g. pr2::base_link\n---\ngazebo_msgs/LinkState link_state\nbool success              # return true if get info is successful\nstring status_message     # comments if available\n'
p1303
sg21
S'package_modeler'
p1304
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetLinkState.srv'
p1305
sbsS'capabilities/GetProviders'
p1306
g0
(g9
g2
Ntp1307
Rp1308
(dp1309
g13
S'srv'
p1310
sg15
S'capabilities/GetProviders'
p1311
sg17
S'capabilities'
p1312
sg19
S'\nstring interface\nbool include_semantic\n---\nstring[] providers\nstring default_provider\n'
p1313
sg21
S'package_modeler'
p1314
sg23
I0
sg24
S'/opt/ros/melodic/share/capabilities/srv/GetProviders.srv'
p1315
sbsS'turtlesim/Spawn'
p1316
g0
(g9
g2
Ntp1317
Rp1318
(dp1319
g13
S'srv'
p1320
sg15
S'turtlesim/Spawn'
p1321
sg17
S'turtlesim'
p1322
sg19
S'\nfloat32 x\nfloat32 y\nfloat32 theta\nstring name # Optional.  A unique name will be created and returned if this is empty\n---\nstring name'
p1323
sg21
S'package_modeler'
p1324
sg23
I0
sg24
S'/opt/ros/melodic/share/turtlesim/srv/Spawn.srv'
p1325
sbsS'moveit_msgs/CheckIfRobotStateExistsInWarehouse'
p1326
g0
(g9
g2
Ntp1327
Rp1328
(dp1329
g13
S'srv'
p1330
sg15
S'moveit_msgs/CheckIfRobotStateExistsInWarehouse'
p1331
sg17
S'moveit_msgs'
p1332
sg19
S'\nstring name\nstring robot\n\n---\n\nbool exists\n'
p1333
sg21
S'package_modeler'
p1334
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/CheckIfRobotStateExistsInWarehouse.srv'
p1335
sbsS'gazebo_msgs/GetWorldProperties'
p1336
g0
(g9
g2
Ntp1337
Rp1338
(dp1339
g13
S'srv'
p1340
sg15
S'gazebo_msgs/GetWorldProperties'
p1341
sg17
S'gazebo_msgs'
p1342
sg19
S'\n---\nfloat64 sim_time                     # current sim time\nstring[] model_names                 # list of models in the world\nbool rendering_enabled               # If gazebo rendering engine is enabled, currently always True\nbool success                         # return true if get successful\nstring status_message                # comments if available\n'
p1343
sg21
S'package_modeler'
p1344
sg23
I0
sg24
S'/opt/ros/melodic/share/gazebo_msgs/srv/GetWorldProperties.srv'
p1345
sbsS'moveit_msgs/GetStateValidity'
p1346
g0
(g9
g2
Ntp1347
Rp1348
(dp1349
g13
S'srv'
p1350
sg15
S'moveit_msgs/GetStateValidity'
p1351
sg17
S'moveit_msgs'
p1352
sg19
S'\nRobotState robot_state\nstring group_name\nConstraints constraints\n\n---\n\nbool valid\nContactInformation[] contacts\nCostSource[] cost_sources\nConstraintEvalResult[] constraint_result\n'
p1353
sg21
S'package_modeler'
p1354
sg23
I0
sg24
S'/opt/ros/melodic/share/moveit_msgs/srv/GetStateValidity.srv'
p1355
sbsS'tf2_msgs/FrameGraph'
p1356
g0
(g9
g2
Ntp1357
Rp1358
(dp1359
g13
S'srv'
p1360
sg15
S'tf2_msgs/FrameGraph'
p1361
sg17
S'tf2_msgs'
p1362
sg19
S'\n---\nstring frame_yaml\n'
p1363
sg21
S'package_modeler'
p1364
sg23
I0
sg24
S'/opt/ros/melodic/share/tf2_msgs/srv/FrameGraph.srv'
p1365
sbsS'turtlesim/Kill'
p1366
g0
(g9
g2
Ntp1367
Rp1368
(dp1369
g13
S'srv'
p1370
sg15
S'turtlesim/Kill'
p1371
sg17
S'turtlesim'
p1372
sg19
S'\nstring name\n---'
p1373
sg21
S'package_modeler'
p1374
sg23
I0
sg24
S'/opt/ros/melodic/share/turtlesim/srv/Kill.srv'
p1375
sbssb.